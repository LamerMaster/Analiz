import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
from datetime import datetime as dt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import LabelEncoder
import streamlit as st
from PIL import Image

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –°–ü–±", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/EgoVed/Research-of-ads-for-the-sale-of-apartments/refs/heads/master/real_estate_data.csv"
    data = pd.read_csv(url)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    data['date'] = pd.to_datetime(data['first_day_exposition'], errors='coerce')
    data['year'] = data['date'].dt.year
    data['month'] = data['date'].dt.month
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –∫–≤.–º
    data['price_per_sqm'] = data['last_price'] / data['total_area']
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = data[data['last_price'] < data['last_price'].quantile(0.99)]
    data = data[data['total_area'] < data['total_area'].quantile(0.99)]
    data = data[data['total_area'] > 10]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    data['rooms'] = data['rooms'].fillna(0).astype(int)
    data['floor'] = data['floor'].fillna(1).astype(int)
    data['floors_total'] = data['floors_total'].fillna(1).astype(int)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format='%Y-%m-%dT%H:%M:%S')
    data['year'] = data['first_day_exposition'].dt.year
    data['month'] = data['first_day_exposition'].dt.month
    data['price_per_sq_m'] = data['last_price'] / data['total_area']
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
    data = data[(data['price_per_sq_m'] > 50000) & (data['price_per_sq_m'] < 500000)]
    data = data[(data['total_area'] > 20) & (data['total_area'] < 200)]
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    data['ceiling_height'].fillna(data['ceiling_height'].median(), inplace=True)
    data['kitchen_area'].fillna(data['kitchen_area'].median(), inplace=True)
    data['living_area'].fillna(data['total_area'] * 0.5, inplace=True)
    return data

try:
    data = load_data()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –°–∞–π–¥–±–∞—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–¥–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º slider –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
year_range = st.sidebar.slider(
    "–î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤",
    min_value=int(data['year'].min()),
    max_value=int(data['year'].max()),
    value=(int(data['year'].min()), int(data['year'].max()))
)

min_area, max_area = st.sidebar.slider(
    "–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)",
    min_value=float(data['total_area'].min()),
    max_value=float(data['total_area'].max()),
    value=(float(data['total_area'].min()), float(data['total_area'].max()))
)

min_price, max_price = st.sidebar.slider(
    "–¶–µ–Ω–∞ (—Ä—É–±)",
    min_value=float(data['last_price'].min()),
    max_value=float(data['last_price'].max()),
    value=(float(data['last_price'].min()), float(data['last_price'].max()))
)

rooms_options = ['–í—Å–µ'] + sorted(data['rooms'].unique().tolist())
selected_rooms = st.sidebar.multiselect(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
    options=rooms_options,
    default=['–í—Å–µ']
)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
filtered_data = data[
    (data['year'] >= year_range[0]) & 
    (data['year'] <= year_range[1]) &
    (data['total_area'] >= min_area) &
    (data['total_area'] <= max_area) &
    (data['last_price'] >= min_price) &
    (data['last_price'] <= max_price)
]

if '–í—Å–µ' not in selected_rooms:
    filtered_data = filtered_data[filtered_data['rooms'].isin([int(x) for x in selected_rooms if x != '–í—Å–µ'])]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ")

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üè† –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω", "üåç –ì–µ–æ–∞–Ω–∞–ª–∏–∑", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"])

with tab1:
    st.header("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        avg_price = np.mean(filtered_data['last_price'])
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.0f} —Ä—É–±")
    with col2:
        avg_area = np.mean(filtered_data['total_area'])
        st.metric("–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å", f"{avg_area:.1f} –∫–≤.–º")
    with col3:
        avg_ppsqm = np.mean(filtered_data['price_per_sqm'])
        st.metric("–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º", f"{avg_ppsqm:,.0f} —Ä—É–±")
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –ø–æ –≥–æ–¥–∞–º
    st.subheader('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –ø–æ –≥–æ–¥–∞–º')
    price_dynamics = filtered_data.groupby('year')['price_per_sq_m'].agg(['mean', 'median', 'count'])
    
    fig1, ax1 = plt.subplots(figsize=(6, 3))
    ax1.plot(price_dynamics.index, price_dynamics['mean'], label='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', marker='o')
    ax1.plot(price_dynamics.index, price_dynamics['median'], label='–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞', marker='o')
    ax1.set_xlabel('–ì–æ–¥')
    ax1.set_ylabel('–¶–µ–Ω–∞ –∑–∞ –º¬≤, —Ä—É–±')
    ax1.set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä')
    ax1.legend()
    ax1.grid(True)
    st.pyplot(fig1)
    
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–≤–∞—Ä—Ç–∏—Ä
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–≤–∞—Ä—Ç–∏—Ä")
    col1, col2 = st.columns(2)
    with col2:
        st.markdown("**–¢–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä**")
        type_counts = filtered_data[['studio', 'is_apartment', 'open_plan']].sum()
        russian_names = {
        'studio': '–°—Ç—É–¥–∏—è',
        'is_apartment': '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã',
        'open_plan': '–ö–≤–∞—Ä—Ç–∏—Ä–∞'
    }
    
        fig_types = px.pie(values=type_counts, 
            names=type_counts.index.map(russian_names),
            height=400)
    
        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ
        fig_types.update_layout(
        legend=dict(
            orientation="v",  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
            yanchor="top",   # –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–µ—Ä—Ö—É
            y=1,             # –ø–æ–∑–∏—Ü–∏—è –ø–æ Y
            xanchor="right", # –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
            x=1.1            # —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
        )
    )
    
    st.plotly_chart(fig_types, use_container_width=True)

with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

        # –í–ª–∏—è–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ü–µ–Ω—É - –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    st.subheader('–í–ª–∏—è–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ü–µ–Ω—É')
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–ª–∏—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            fig4, ax4 = plt.subplots(figsize=(6, 4)) 
            sns.boxplot(data=filtered_data, x='rooms', y='price_per_sq_m', ax=ax4)
            ax4.set_title('–¶–µ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç')
            ax4.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç')
            ax4.set_ylabel('–¶–µ–Ω–∞ –∑–∞ –º¬≤, —Ä—É–±')
            st.pyplot(fig4)
    
            st.subheader(" –í–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ü–µ–Ω—É –∑–∞ –º¬≤")
            corr_data = filtered_data[['price_per_sq_m', 'total_area', 'rooms', 'floor', 'kitchen_area']].corr()
            fig4 = px.line_polar(
            corr_data.drop('price_per_sq_m'),
            r=corr_data.loc['price_per_sq_m'].drop('price_per_sq_m'),
            theta=corr_data.columns.drop('price_per_sq_m'),
            line_close=True,
            height=400
            )
            st.plotly_chart(fig4, use_container_width=True)
    
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –ø–ª–æ—â–∞–¥–µ–π")
    col1, col2 = st.columns(2)
    
    with col1:
        try:
                st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω**")
                fig1 = plt.figure(figsize=(8,4))
                sns.boxplot(x=filtered_data['last_price'], color='skyblue')
                plt.xlabel('–¶–µ–Ω–∞ (—Ä—É–±)')
                st.pyplot(fig1)
        except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω: {str(e)}")
    
    with col2:
        try:
                st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π**")
                fig2 = plt.figure(figsize=(8,4))
                sns.boxplot(x=filtered_data['total_area'], color='lightgreen')
                plt.xlabel('–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)')
                st.pyplot(fig2)
        except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–æ—â–∞–¥–µ–π: {str(e)}")

with tab3:
    st.header("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    # –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö/–¥–µ—à–µ–≤—ã—Ö —Ä–∞–π–æ–Ω–æ–≤
    st.subheader(" –¢–æ–ø-10 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–µ –∑–∞ –º¬≤")
        
    locality_prices = filtered_data.groupby('locality_name')['price_per_sq_m'].agg(['mean', 'count']).sort_values('mean')
    top10_expensive = locality_prices.nlargest(10, 'mean')
    top10_cheapest = locality_prices.nsmallest(10, 'mean')
        
    tab_exp, tab_cheap = st.tabs(["–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ", "–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ"])
        
with tab_exp:
    fig4a = px.bar(
    top10_expensive,
    x='mean',
    y=top10_expensive.index,
    orientation='h',
    labels={'mean': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤', 'locality_name': '–†–∞–π–æ–Ω'},
    height=400
    )
    st.plotly_chart(fig4a, use_container_width=True)
        
with tab_cheap:
    fig4b = px.bar(
    top10_cheapest,
    x='mean',
    y=top10_cheapest.index,
    orientation='h',
    labels={'mean': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤', 'locality_name': '–†–∞–π–æ–Ω'},
    height=400
    )
    st.plotly_chart(fig4b, use_container_width=True)


with tab4:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    model_data = filtered_data.copy()
    features = ['total_area', 'rooms', 'floor', 'floors_total', 'kitchen_area', 'living_area']
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    le = LabelEncoder()
    if 'locality_name' in model_data.columns:
        model_data['locality_name'] = le.fit_transform(model_data['locality_name'])
        features.append('locality_name')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    model_data = model_data.dropna(subset=features + ['last_price'])
    
    if len(model_data) > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
        X = model_data[features]
        y = model_data['last_price']
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        y_pred = model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (MAE)", f"{mae:,.0f} —Ä—É–±")
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (R¬≤)", f"{r2:.2f}")
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.subheader("–û–Ω–ª–∞–π–Ω-–ø—Ä–æ–≥–Ω–æ–∑")
        
        with st.form("prediction_form"):
            col1, col2 = st.columns(2)
            with col1:
                area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)", min_value=10.0, max_value=500.0, value=50.0)
                rooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", min_value=0, max_value=10, value=1)
                floor = st.number_input("–≠—Ç–∞–∂", min_value=1, max_value=100, value=5)
            with col2:
                floors_total = st.number_input("–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π", min_value=1, max_value=100, value=10)
                kitchen_area = st.number_input("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–∫–≤.–º)", min_value=1.0, max_value=100.0, value=10.0)
                living_area = st.number_input("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)", min_value=10.0, max_value=500.0, value=30.0)
            
            submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
            
            if submitted:
                input_data = pd.DataFrame({
                    'total_area': [area],
                    'rooms': [rooms],
                    'floor': [floor],
                    'floors_total': [floors_total],
                    'kitchen_area': [kitchen_area],
                    'living_area': [living_area]
                })
                
                if 'locality_name' in features:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ä–∞–π–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    common_locality = model_data['locality_name'].mode()[0]
                    input_data['locality_name'] = common_locality
                
                prediction = model.predict(input_data[features])
                price_per_sqm = prediction[0] / area
                
                st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction[0]:,.0f} —Ä—É–±")
                st.info(f"–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º: {price_per_sqm:,.0f} —Ä—É–±")
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –°–ü–± | –î–∞–Ω–Ω—ã–µ: GitHub")