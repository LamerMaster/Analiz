import streamlit as st
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –°–ü–±", layout="wide")
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import LabelEncoder
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/EgoVed/Research-of-ads-for-the-sale-of-apartments/refs/heads/master/real_estate_data.csv"
    data = pd.read_csv(url)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    data['date'] = pd.to_datetime(data['first_day_exposition'], errors='coerce')
    data['year'] = data['date'].dt.year
    data['month'] = data['date'].dt.month
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –∫–≤.–º
    data['price_per_sqm'] = data['last_price'] / data['total_area']
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = data[data['last_price'] < data['last_price'].quantile(0.99)]
    data = data[data['total_area'] < data['total_area'].quantile(0.99)]
    data = data[data['total_area'] > 10]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    data['rooms'] = data['rooms'].fillna(0).astype(int)
    data['floor'] = data['floor'].fillna(1).astype(int)
    data['floors_total'] = data['floors_total'].fillna(1).astype(int)
    
    return data

try:
    data = load_data()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ")

# –°–∞–π–¥–±–∞—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
selected_years = st.sidebar.multiselect(
    "–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    options=sorted(data['year'].unique()),
    default=sorted(data['year'].unique())
)

min_area, max_area = st.sidebar.slider(
    "–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)",
    min_value=float(data['total_area'].min()),
    max_value=float(data['total_area'].max()),
    value=(float(data['total_area'].min()), float(data['total_area'].max()))
)

min_price, max_price = st.sidebar.slider(
    "–¶–µ–Ω–∞ (—Ä—É–±)",
    min_value=float(data['last_price'].min()),
    max_value=float(data['last_price'].max()),
    value=(float(data['last_price'].min()), float(data['last_price'].max()))
)

rooms_options = ['–í—Å–µ'] + sorted(data['rooms'].unique().tolist())
selected_rooms = st.sidebar.multiselect(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
    options=rooms_options,
    default=['–í—Å–µ']
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_data = data[
    (data['year'].isin(selected_years)) &
    (data['total_area'] >= min_area) &
    (data['total_area'] <= max_area) &
    (data['last_price'] >= min_price) &
    (data['last_price'] <= max_price)
]

if '–í—Å–µ' not in selected_rooms:
    filtered_data = filtered_data[filtered_data['rooms'].isin(selected_rooms)]

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üè¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "üìà –î–∏–Ω–∞–º–∏–∫–∞", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"])

with tab1:
    st.header("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        avg_price = np.mean(filtered_data['last_price'])
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.0f} —Ä—É–±")
    with col2:
        avg_area = np.mean(filtered_data['total_area'])
        st.metric("–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å", f"{avg_area:.1f} –∫–≤.–º")
    with col3:
        avg_ppsqm = np.mean(filtered_data['price_per_sqm'])
        st.metric("–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º", f"{avg_ppsqm:,.0f} —Ä—É–±")
    
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ –ø–ª–æ—â–∞–¥–µ–π")
    fig = make_subplots(rows=1, cols=2)
    fig.add_trace(go.Histogram(x=filtered_data['last_price'], name="–¶–µ–Ω—ã"), row=1, col=1)
    fig.add_trace(go.Histogram(x=filtered_data['total_area'], name="–ü–ª–æ—â–∞–¥–∏"), row=1, col=2)
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø–ª–æ—â–∞–¥–∏")
    fig = px.scatter(
        filtered_data,
        x='total_area',
        y='last_price',
        color='rooms',
        hover_data=['locality_name', 'floor', 'floors_total']
    )
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–∂–∞–º")
        floor_counts = filtered_data['floor'].value_counts().sort_index()
        fig = px.bar(floor_counts, labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'index': '–≠—Ç–∞–∂'})
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("–¢–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä")
        type_counts = filtered_data[['studio', 'is_apartment', 'open_plan']].sum()
        fig = px.pie(values=type_counts, names=type_counts.index)
        st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("–ù–∞–ª–∏—á–∏–µ –±–∞–ª–∫–æ–Ω–æ–≤")
    balcony_counts = filtered_data['balcony'].value_counts()
    fig = px.pie(values=balcony_counts, names=balcony_counts.index)
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    time_data = filtered_data.groupby(['year', 'month']).agg({
        'last_price': 'mean',
        'price_per_sqm': 'mean',
        'total_area': 'mean'
    }).reset_index()
    time_data['date'] = pd.to_datetime(time_data['year'].astype(str) + '-' + time_data['month'].astype(str) + '-01')
    
    fig = px.line(
        time_data,
        x='date',
        y=['last_price', 'price_per_sqm'],
        labels={'value': '–¶–µ–Ω–∞', 'variable': '–¢–∏–ø —Ü–µ–Ω—ã'}
    )
    st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("–í—Ä–µ–º—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏")
    fig = px.box(filtered_data, y='days_exposition')
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    model_data = filtered_data.copy()
    features = ['total_area', 'rooms', 'floor', 'floors_total', 'kitchen_area', 'living_area']
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    le = LabelEncoder()
    if 'locality_name' in model_data.columns:
        model_data['locality_name'] = le.fit_transform(model_data['locality_name'])
        features.append('locality_name')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    model_data = model_data.dropna(subset=features + ['last_price'])
    
    if len(model_data) > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
        X = model_data[features]
        y = model_data['last_price']
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        y_pred = model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (MAE)", f"{mae:,.0f} —Ä—É–±")
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (R¬≤)", f"{r2:.2f}")
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.subheader("–û–Ω–ª–∞–π–Ω-–ø—Ä–æ–≥–Ω–æ–∑")
        
        with st.form("prediction_form"):
            col1, col2 = st.columns(2)
            with col1:
                area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)", min_value=10.0, max_value=500.0, value=50.0)
                rooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", min_value=0, max_value=10, value=1)
                floor = st.number_input("–≠—Ç–∞–∂", min_value=1, max_value=100, value=5)
            with col2:
                floors_total = st.number_input("–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π", min_value=1, max_value=100, value=10)
                kitchen_area = st.number_input("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–∫–≤.–º)", min_value=1.0, max_value=100.0, value=10.0)
                living_area = st.number_input("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)", min_value=10.0, max_value=500.0, value=30.0)
            
            submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
            
            if submitted:
                input_data = pd.DataFrame({
                    'total_area': [area],
                    'rooms': [rooms],
                    'floor': [floor],
                    'floors_total': [floors_total],
                    'kitchen_area': [kitchen_area],
                    'living_area': [living_area]
                })
                
                if 'locality_name' in features:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ä–∞–π–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    common_locality = model_data['locality_name'].mode()[0]
                    input_data['locality_name'] = common_locality
                
                prediction = model.predict(input_data[features])
                price_per_sqm = prediction[0] / area
                
                st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction[0]:,.0f} —Ä—É–±")
                st.info(f"–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º: {price_per_sqm:,.0f} —Ä—É–±")
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –°–ü–± | –î–∞–Ω–Ω—ã–µ: GitHub")